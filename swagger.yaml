openapi: 3.0.0
info:
  title: library management api
  version: 1.0.0
  description: simple library management system with book reservations

servers:
  - url: http://localhost:8080/api/v1
    description: local dev server

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
          description: book id
        title:
          type: string
          description: book title
        author:
          type: string
          description: book author
        isbn:
          type: string
          description: book isbn
        is_reserved:
          type: boolean
          description: whether the book is reserved
        reserved_by:
          type: string
          description: id of user who reserved the book
      required:
        - id
        - title
        - author
        - isbn

    User:
      type: object
      properties:
        id:
          type: string
          description: user id
        username:
          type: string
          description: username
        name:
          type: string
          description: full name
        email:
          type: string
          description: email address
        reserved_books:
          type: array
          items:
            type: string
          description: list of reserved book ids
      required:
        - id
        - username
        - name
        - email

    ReservationResponse:
      type: object
      properties:
        book_id:
          type: string
          description: book id
        user_id:
          type: string
          description: user id
        message:
          type: string
          description: success message

    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          description: success message

    Error:
      type: object
      properties:
        error:
          type: string
          description: error message

  securitySchemes:
    user_id:
      type: apiKey
      in: header
      name: user_id
      description: user id for authentication

paths:
  /books:
    get:
      summary: list all books
      responses:
        "200":
          description: list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    post:
      summary: add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "201":
          description: book created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /books/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: book id
    get:
      summary: get book details
      responses:
        "200":
          description: book details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "404":
          description: book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: delete a book
      responses:
        "200":
          description: book deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400":
          description: cannot delete book - book is currently reserved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users:
    get:
      summary: list all users
      responses:
        "200":
          description: list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: add a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: user created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: invalid input or username already taken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: user id
    get:
      summary: get user details
      responses:
        "200":
          description: user details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: user not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: username
                name:
                  type: string
                  description: full name
                email:
                  type: string
                  description: email address
      responses:
        "200":
          description: user updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: invalid input or username already taken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: user not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /books/{id}/reserve:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: book id
    post:
      summary: reserve a book
      security:
        - user_id: []
      responses:
        "200":
          description: book reserved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReservationResponse"
        "400":
          description: book already reserved or invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: book or user not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: cancel a reservation
      security:
        - user_id: []
      responses:
        "200":
          description: reservation canceled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400":
          description: book not reserved by this user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}/reservations:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: user id
    get:
      summary: get userâ€™s reserved books
      security:
        - user_id: []
      responses:
        "200":
          description: list of reserved book ids
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "403":
          description: unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: user not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"